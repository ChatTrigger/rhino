{
  "candidate (stage 3)›WeakReferences›WeakRef minimal support": "var O = {};\nvar weakref = new WeakRef(O);\nreturn weakref.deref() === O;",
  "candidate (stage 3)›WeakReferences›Finalizers minimal support": "var fg = new FinalizationGroup(function() {});\nreturn Object.getPrototypeOf(fg) === FinalizationGroup.prototype;",
  "candidate (stage 3)›instance class fields›public instance class fields": "class C {\n  x = 'x';\n}\nreturn new C().x === 'x';",
  "candidate (stage 3)›instance class fields›private instance class fields basic support": "class C {\n  #x;\n  constructor(x){\n    this.#x = x;\n  }\n  x(){\n    return this.#x;\n  }\n}\nreturn new C(42).x() === 42;",
  "candidate (stage 3)›instance class fields›private instance class fields initializers": "class C {\n  #x = 42;\n  x(){\n    return this.#x;\n  }\n}\nreturn new C().x() === 42;",
  "candidate (stage 3)›instance class fields›computed instance class fields": "class C {\n  ['x'] = 42;\n}\nreturn new C().x === 42;",
  "candidate (stage 3)›static class fields›public static class fields": "class C {\n  static x = 'x';\n}\nreturn C.x === 'x';",
  "candidate (stage 3)›static class fields›private static class fields": "class C {\n  static #x = 42;\n  x(){\n    return C.#x;\n  }\n}\nreturn new C().x() === 42;",
  "candidate (stage 3)›static class fields›computed static class fields": "class C {\n  static ['x'] = 42;\n}\nreturn C.x === 42;",
  "candidate (stage 3)›optional chaining operator (?.)›optional property access": "var foo = { baz: 42 };\nvar bar = null;\nreturn foo?.baz === 42 && bar?.baz === undefined;",
  "candidate (stage 3)›optional chaining operator (?.)›optional bracket access": "var foo = { baz: 42 };\nvar bar = null;\nreturn foo?.['baz'] === 42 && bar?.['baz'] === undefined;",
  "candidate (stage 3)›optional chaining operator (?.)›optional method access": "var foo = { baz: function () { return 42; } };\nvar bar = null;\nreturn foo?.baz() === 42 && bar?.baz() === undefined;",
  "candidate (stage 3)›optional chaining operator (?.)›optional method call": "var foo = { baz: function() { return 42; }};\nvar bar = { baz: undefined };\nreturn foo.baz?.() === 42 && bar.baz?.() === undefined;",
  "candidate (stage 3)›nullish coalescing operator (??)": "return (null ?? 42) === 42 &&\n  (undefined ?? 42) === 42 &&\n  (false ?? 42) === false &&\n  ('' ?? 42) === '' &&\n  (0 ?? 42) === 0 &&\n  isNaN(NaN ?? 42);",
  "candidate (stage 3)›numeric separators": "return 1_000_000.000_001 === 1000000.000001 &&\n  0b1010_0001_1000_0101 === 0b1010000110000101;",
  "candidate (stage 3)›String.prototype.replaceAll": "return 'q=query+string+parameters'.replaceAll('+', ' ') === 'q=query string parameters';",
  "candidate (stage 3)›Promise.any": "Promise.any([\n  Promise.resolve(1),\n  Promise.reject(2),\n  Promise.resolve(3)\n]).then(it => {\n  if (it === 1) asyncTestPassed();\n  else asyncTestFailed();\n});",
  "candidate (stage 3)›Legacy RegExp features in JavaScript›RegExp \"lastMatch\"": "var re = /\\w/;\nre.exec('x');\nreturn RegExp.lastMatch === 'x';",
  "candidate (stage 3)›Legacy RegExp features in JavaScript›RegExp.$1-$9": "for (var i = 1; i < 10; i++) {\n  if (!(('$' + i) in RegExp)) return false;\n}\nreturn true;",
  "draft (stage 2)›Generator function.sent Meta Property": "var result;\nfunction* generator() {\n  result = function.sent;\n}\nvar iter = generator();\niter.next('tromple');\nreturn result === 'tromple';",
  "draft (stage 2)›Class and Property Decorators›class decorators": "class A {\n  @nonconf\n  get B() {}\n}\nfunction nonconf(target, name, descriptor) {\n  descriptor.configurable = false;\n  return descriptor;\n}\nreturn Object.getOwnPropertyDescriptor(A.prototype, \"B\").configurable === false;",
  "draft (stage 2)›Realms": "return typeof Realm === \"function\"\n  && [\"eval\", \"global\", \"intrinsics\", \"stdlib\", \"directEval\", \"indirectEval\", \"initGlobal\", \"nonEval\"].every(function(key){\n    return key in Realm.prototype;\n  });",
  "draft (stage 2)›throw expressions›logical": "var a, b;\ntry {\n  a = 19 || throw 77;\n  b = 88 && throw 23;\n} catch (e) {\n  return a + e === 42;\n}",
  "draft (stage 2)›throw expressions›parameter initializers": "function fn (arg = throw 42) {\n  return arg;\n}\n\nif (fn(21) !== 21) return false;\n\ntry {\n  fn();\n} catch (e) {\n  return e === 42;\n}",
  "draft (stage 2)›throw expressions›arrow function bodies": "var fn = () => throw 42;\ntry {\n  fn();\n} catch (e) {\n  return e === 42;\n}",
  "draft (stage 2)›throw expressions›conditionals": "true ? 42 : throw 21;\ntry {\n  false ? 42 : throw 21;\n} catch (e) {\n  return e === 21;\n}",
  "draft (stage 2)›Set methods›Set.prototype.intersection": "var set = new Set([1, 2, 3]).intersection(new Set([2, 3, 4]));\nreturn set.size === 2\n  && set.has(2)\n  && set.has(3);",
  "draft (stage 2)›Set methods›Set.prototype.union": "var set = new Set([1, 2]).union(new Set([2, 3]));\nreturn set.size === 3\n  && set.has(1)\n  && set.has(2)\n  && set.has(3);",
  "draft (stage 2)›Set methods›Set.prototype.difference": "var set = new Set([1, 2, 3]).difference(new Set([3, 4]));\nreturn set.size === 2\n  && set.has(1)\n  && set.has(2);",
  "draft (stage 2)›Set methods›Set.prototype.symmetricDifference": "var set = new Set([1, 2]).symmetricDifference(new Set([2, 3]));\nreturn set.size === 2\n  && set.has(1)\n  && set.has(3);",
  "draft (stage 2)›Set methods›Set.prototype.isDisjointFrom": "return new Set([1, 2, 3]).isDisjointFrom([4, 5, 6]);",
  "draft (stage 2)›Set methods›Set.prototype.isSubsetOf": "return new Set([1, 2, 3]).isSubsetOf([5, 4, 3, 2, 1]);",
  "draft (stage 2)›Set methods›Set.prototype.isSupersetOf": "return new Set([5, 4, 3, 2, 1]).isSupersetOf([1, 2, 3]);",
  "draft (stage 2)›ArrayBuffer.prototype.transfer›ArrayBuffer.prototype.transfer()": "const buffer1 = new Uint8Array([1, 2]).buffer;\nconst buffer2 = buffer1.transfer();\nreturn buffer1.byteLength === 0\n  && buffer2.byteLength === 2;",
  "draft (stage 2)›ArrayBuffer.prototype.transfer›ArrayBuffer.prototype.realloc()": "const buffer1 = new ArrayBuffer(1024);\nconst buffer2 = buffer1.realloc(256);\nreturn buffer1.byteLength === 0\n  && buffer2.byteLength === 256;",
  "draft (stage 2)›Map.prototype.upsert›Map.prototype.upsert": "const map = new Map([['a', 1]]);\nif (map.upsert('a', it => 2, () => 3) !== 2) return false;\nif (map.upsert('b', it => 2, () => 3) !== 3) return false;\nreturn Array.from(map).join() === 'a,2,b,3';",
  "draft (stage 2)›Map.prototype.upsert›WeakMap.prototype.upsert": "const a = {}, b = {};\nconst map = new WeakMap([[a, 1]]);\nif (map.upsert(a, it => 2, () => 3) !== 2) return false;\nif (map.upsert(b, it => 2, () => 3) !== 3) return false;\nreturn map.get(a) === 2 && map.get(b) === 3;",
  "draft (stage 2)›Array.isTemplateObject": "return !Array.isTemplateObject([])\n  && Array.isTemplateObject((it => it)`a{1}c`);",
  "draft (stage 2)›Iterator Helpers›instanceof Iterator": "return [1, 2, 3].values() instanceof Iterator;",
  "draft (stage 2)›Iterator Helpers›extends Iterator": "class Class extends Iterator { }\nconst instance = new Class();\nreturn instance[Symbol.iterator]() === instance;",
  "draft (stage 2)›Iterator Helpers›Iterator.from, iterable": "const iterator = Iterator.from([1, 2, 3]);\nreturn 'next' in iterator\n  && iterator instanceof Iterator\n  && Array.from(iterator).join() === '1,2,3';",
  "draft (stage 2)›Iterator Helpers›Iterator.from, iterator": "const iterator = Iterator.from({\n  i: 0,\n  next() {\n    return { value: ++this.i, done: this.i > 3 };\n  }\n});\nreturn 'next' in iterator\n  && iterator instanceof Iterator\n  && Array.from(iterator).join() === '1,2,3';",
  "draft (stage 2)›Iterator Helpers›Iterator.prototype.asIndexedPairs": "return Array.from([1, 2, 3].values().asIndexedPairs()).join() === '0,1,1,2,2,3';",
  "draft (stage 2)›Iterator Helpers›Iterator.prototype.drop": "return Array.from([1, 2, 3].values().drop(1)).join() === '2,3';",
  "draft (stage 2)›Iterator Helpers›Iterator.prototype.every": "return [1, 2, 3].values().every(it => typeof it === 'number');",
  "draft (stage 2)›Iterator Helpers›Iterator.prototype.filter": "return Array.from([1, 2, 3].values().filter(it => it % 2)).join() === '1,3';",
  "draft (stage 2)›Iterator Helpers›Iterator.prototype.find": "return [1, 2, 3].values().find(it => it % 2) === 1;",
  "draft (stage 2)›Iterator Helpers›Iterator.prototype.flatMap": "return Array.from([1, 2, 3].values().flatMap(it => [it, 0])).join() === '1,0,2,0,3,0';",
  "draft (stage 2)›Iterator Helpers›Iterator.prototype.forEach": "let result = '';\n[1, 2, 3].values().forEach(it => result += it);\nreturn result === '123';",
  "draft (stage 2)›Iterator Helpers›Iterator.prototype.map": "return Array.from([1, 2, 3].values().map(it => it * it)).join() === '1,4,9';",
  "draft (stage 2)›Iterator Helpers›Iterator.prototype.reduce": "return [1, 2, 3].values().reduce((a, b) => a + b) === 6;",
  "draft (stage 2)›Iterator Helpers›Iterator.prototype.some": "return [1, 2, 3].values().some(it => typeof it === 'number');",
  "draft (stage 2)›Iterator Helpers›Iterator.prototype.take": "return Array.from([1, 2, 3].values().take(2)).join() === '1,2';",
  "draft (stage 2)›Iterator Helpers›Iterator.prototype.toArray": "const array = [1, 2, 3].values().toArray();\nreturn Array.isArray(array) && array.join() === '1,2,3';",
  "draft (stage 2)›Iterator Helpers›Iterator.prototype[@@toStringTag]": "return Iterator.prototype[Symbol.toStringTag] === 'Iterator';",
  "draft (stage 2)›Iterator Helpers›instanceof AsyncIterator": "return (async function*() {})() instanceof AsyncIterator;",
  "draft (stage 2)›Iterator Helpers›extends AsyncIterator": "class Class extends AsyncIterator { }\nconst instance = new Class();\nreturn instance[Symbol.asyncIterator]() === instance;",
  "draft (stage 2)›Iterator Helpers›AsyncIterator.from, async iterable": "async function toArray(iterator) {\n  const result = [];\n  for await (const it of iterator) result.push(it);\n  return result;\n}\n\nconst iterator = AsyncIterator.from(async function*() { yield * [1, 2, 3] }());\n\nif (!('next' in iterator) || !(iterator instanceof AsyncIterator)) return false;\n\ntoArray(iterator).then(it => {\n  if (it.join() === '1,2,3') asyncTestPassed();\n  else asyncTestFailed();\n});",
  "draft (stage 2)›Iterator Helpers›AsyncIterator.from, iterable": "async function toArray(iterator) {\n  const result = [];\n  for await (const it of iterator) result.push(it);\n  return result;\n}\n\nconst iterator = AsyncIterator.from([1, 2, 3]);\n\nif (!('next' in iterator) || !(iterator instanceof AsyncIterator)) return false;\n\ntoArray(iterator).then(it => {\n  if (it.join() === '1,2,3') asyncTestPassed();\n  else asyncTestFailed();\n});",
  "draft (stage 2)›Iterator Helpers›AsyncIterator.from, iterator": "async function toArray(iterator) {\n  const result = [];\n  for await (const it of iterator) result.push(it);\n  return result;\n}\n\nconst iterator = AsyncIterator.from([1, 2, 3].values());\n\nif (!('next' in iterator) || !(iterator instanceof AsyncIterator)) return false;\n\ntoArray(iterator).then(it => {\n  if (it.join() === '1,2,3') asyncTestPassed();\n  else asyncTestFailed();\n});",
  "draft (stage 2)›Iterator Helpers›AsyncIterator.prototype.asIndexedPairs": "async function toArray(iterator) {\n  const result = [];\n  for await (const it of iterator) result.push(it);\n  return result;\n}\n\ntoArray((async function*() { yield * [1, 2, 3] })().asIndexedPairs()).then(it => {\n  if (it.join() === '0,1,1,2,2,3') asyncTestPassed();\n  else asyncTestFailed();\n});",
  "draft (stage 2)›Iterator Helpers›AsyncIterator.prototype.drop": "async function toArray(iterator) {\n  const result = [];\n  for await (const it of iterator) result.push(it);\n  return result;\n}\n\ntoArray(async function*() { yield * [1, 2, 3] }().drop(1)).then(it => {\n  if (it.join() === '2,3') asyncTestPassed();\n  else asyncTestFailed();\n});",
  "draft (stage 2)›Iterator Helpers›AsyncIterator.prototype.every": "(async function*() { yield * [1, 2, 3] })().every(it => typeof it === 'number').then(it => {\n  if (it === true) asyncTestPassed();\n  else asyncTestFailed();\n});",
  "draft (stage 2)›Iterator Helpers›AsyncIterator.prototype.filter": "async function toArray(iterator) {\n  const result = [];\n  for await (const it of iterator) result.push(it);\n  return result;\n}\n\ntoArray(async function*() { yield * [1, 2, 3] }().filter(it => it % 2)).then(it => {\n  if (it.join() === '1,3') asyncTestPassed();\n  else asyncTestFailed();\n});",
  "draft (stage 2)›Iterator Helpers›AsyncIterator.prototype.find": "(async function*() { yield * [1, 2, 3] })().find(it => it % 2).then(it => {\n  if (it === 1) asyncTestPassed();\n  else asyncTestFailed();\n});",
  "draft (stage 2)›Iterator Helpers›AsyncIterator.prototype.flatMap": "async function toArray(iterator) {\n  const result = [];\n  for await (const it of iterator) result.push(it);\n  return result;\n}\n\ntoArray(async function*() { yield * [1, 2, 3] }().flatMap(it => [it, 0])).then(it => {\n  if (it.join() === '1,0,2,0,3,0') asyncTestPassed();\n  else asyncTestFailed();\n});",
  "draft (stage 2)›Iterator Helpers›AsyncIterator.prototype.forEach": "let result = '';\n(async function*() { yield * [1, 2, 3] })().forEach(it => result += it).then(() => {\n  if (result === '123') asyncTestPassed();\n  else asyncTestFailed();\n});",
  "draft (stage 2)›Iterator Helpers›AsyncIterator.prototype.map": "async function toArray(iterator) {\n  const result = [];\n  for await (const it of iterator) result.push(it);\n  return result;\n}\n\ntoArray(async function*() { yield * [1, 2, 3] }().map(it => it * it)).then(it => {\n  if (it.join() === '1,4,9') asyncTestPassed();\n  else asyncTestFailed();\n});",
  "draft (stage 2)›Iterator Helpers›AsyncIterator.prototype.reduce": "(async function*() { yield * [1, 2, 3] })().reduce((a, b) => a + b).then(it => {\n  if (it === 6) asyncTestPassed();\n  else asyncTestFailed();\n});",
  "draft (stage 2)›Iterator Helpers›AsyncIterator.prototype.some": "(async function*() { yield * [1, 2, 3] })().some(it => typeof it === 'number').then(it => {\n  if (it === true) asyncTestPassed();\n  else asyncTestFailed();\n});",
  "draft (stage 2)›Iterator Helpers›AsyncIterator.prototype.take": "async function toArray(iterator) {\n  const result = [];\n  for await (const it of iterator) result.push(it);\n  return result;\n}\n\ntoArray(async function*() { yield * [1, 2, 3] }().take(2)).then(it => {\n  if (it.join() === '1,2') asyncTestPassed();\n  else asyncTestFailed();\n});",
  "draft (stage 2)›Iterator Helpers›AsyncIterator.prototype.toArray": "(async function*() { yield * [1, 2, 3] })().toArray().then(it => {\n  if (Array.isArray(it) && it.join() === '1,2,3') asyncTestPassed();\n  else asyncTestFailed();\n});",
  "draft (stage 2)›Iterator Helpers›AsyncIterator.prototype[@@toStringTag]": "return AsyncIterator.prototype[Symbol.toStringTag] === 'AsyncIterator';",
  "proposal (stage 1)›do expressions": "return do {\n  let x = 23;\n  x + 19;\n} === 42;",
  "proposal (stage 1)›Observable›basic support": "return typeof Observable !== 'undefined';",
  "proposal (stage 1)›Observable›Symbol.observable well known symbol": "return typeof Symbol.observable === 'symbol';",
  "proposal (stage 1)›Observable›Observable.prototype.subscribe": "return 'subscribe' in Observable.prototype;",
  "proposal (stage 1)›Observable›Observable constructor behavior": "if(!(new Observable(function(){}) instanceof Observable))return false;\n\nvar nonCallableCheckPassed,\n    primitiveCheckPassed,\n    newCheckPassed;\n\ntry { new Observable({ }) } catch(e) { nonCallableCheckPassed = true }\ntry { new Observable(false) } catch(e) { primitiveCheckPassed = true }\ntry { Observable(function() { }) } catch(e) { newCheckPassed = true }\n\nreturn nonCallableCheckPassed && primitiveCheckPassed && newCheckPassed;",
  "proposal (stage 1)›Observable›Observable.prototype[Symbol.observable]": "var o = new Observable(function() { });\nreturn Symbol.observable in Observable.prototype && o[Symbol.observable]() === o;",
  "proposal (stage 1)›Observable›Observable.of": "return Observable.of(1, 2, 3) instanceof Observable;",
  "proposal (stage 1)›Observable›Observable.from": "return (Observable.from([1,2,3,4]) instanceof Observable) && (Observable.from(new Set([1, 2, 3])) instanceof Observable);",
  "proposal (stage 1)›Frozen Realms API": "return typeof Reflect.Realm.immutableRoot === 'function'\n  && typeof Reflect.Realm.prototype.spawn === 'function';",
  "proposal (stage 1)›Math.signbit": "return Math.signbit(NaN) === false\n  && Math.signbit(-0) === true\n  && Math.signbit(0) === false\n  && Math.signbit(-42) === true\n  && Math.signbit(42) === false;",
  "proposal (stage 1)›Math extensions proposal›Math.clamp": "return Math.clamp(2, 4, 6) === 4\n  && Math.clamp(4, 2, 6) === 4\n  && Math.clamp(6, 2, 4) === 4;",
  "proposal (stage 1)›Math extensions proposal›Math.DEG_PER_RAD": "return Math.DEG_PER_RAD === Math.PI / 180;",
  "proposal (stage 1)›Math extensions proposal›Math.degrees": "return Math.degrees(Math.PI / 2) === 90\n  && Math.degrees(Math.PI) === 180;",
  "proposal (stage 1)›Math extensions proposal›Math.fscale": "return Math.fscale(3, 1, 2, 1, Math.PI) === Math.fround((3 - 1) * (Math.PI - 1) / (2 - 1) + 1);",
  "proposal (stage 1)›Math extensions proposal›Math.RAD_PER_DEG": "return Math.RAD_PER_DEG === 180 / Math.PI;",
  "proposal (stage 1)›Math extensions proposal›Math.radians": "return Math.radians(90) === Math.PI / 2\n  && Math.radians(180) === Math.PI;",
  "proposal (stage 1)›Math extensions proposal›Math.scale": "return Math.scale(0, 3, 5, 8, 10) === 5;",
  "proposal (stage 1)›Promise.try›basic support": "return typeof Promise.try === 'function';",
  "proposal (stage 1)›Promise.try›returns instance of Promise": "return Promise.try(function () {}) instanceof Promise;",
  "proposal (stage 1)›Promise.try›call function synchronously": "var score = 0;\nPromise.try(function () { score++ });\nreturn score === 1;",
  "proposal (stage 1)›Promise.try›function returns value": "var score = 0;\nPromise.try(function() {\n  score++;\n  return 'foo';\n}).then(function(val) {\n  score += (val === 'foo');\n  if (score === 2) asyncTestPassed();\n  else asyncTestFailed();\n});",
  "proposal (stage 1)›Promise.try›function throws exception": "var score = 0;\nPromise.try(function() {\n  score++;\n  throw 'bar';\n}).catch(function(err) {\n  score += (err === 'bar');\n  if (score === 2) asyncTestPassed();\n  else asyncTestFailed();\n});",
  "proposal (stage 1)›Promise.try›function returns fulfilled Promise": "var score = 0;\nPromise.try(function() {\n  score++;\n  return Promise.resolve('foo');\n}).then(function(val) {\n  score += (val === 'foo');\n  if (score === 2) asyncTestPassed();\n  else asyncTestFailed();\n});",
  "proposal (stage 1)›Promise.try›function returns rejected Promise": "var score = 0;\nPromise.try(function() {\n  score++;\n  return Promise.reject('bar');\n}).catch(function(err) {\n  score += (err === 'bar');\n  if (score === 2) asyncTestPassed();\n  else asyncTestFailed();\n});",
  "proposal (stage 1)›`.of` and `.from` on collection constructors›Map.of": "var A = {};\nvar B = {};\nvar C = Map.of([A, 1], [B, 2]);\nreturn C.get(A) + C.get(B) === 3;",
  "proposal (stage 1)›`.of` and `.from` on collection constructors›Map.from": "var A = {};\nvar B = {};\nvar C = Map.from([[A, 1], [B, 2]], function (it) {\n  return [it[0], it[1] + 1];\n});\nreturn C.get(A) + C.get(B) === 5;",
  "proposal (stage 1)›`.of` and `.from` on collection constructors›Set.of": "var A = {};\nvar B = {};\nvar C = Set.of(A, B);\nreturn C.has(A) + C.has(B);",
  "proposal (stage 1)›`.of` and `.from` on collection constructors›Set.from": "var C = Set.from([1, 2], function (it) {\n  return it + 2;\n});\nreturn C.has(3) + C.has(4);",
  "proposal (stage 1)›`.of` and `.from` on collection constructors›WeakMap.of": "var A = {};\nvar B = {};\nvar C = WeakMap.of([A, 1], [B, 2]);\nreturn C.get(A) + C.get(B) === 3;",
  "proposal (stage 1)›`.of` and `.from` on collection constructors›WeakMap.from": "var A = {};\nvar B = {};\nvar C = WeakMap.from([[A, 1], [B, 2]], function (it) {\n  return [it[0], it[1] + 1];\n});\nreturn C.get(A) + C.get(B) === 5;",
  "proposal (stage 1)›`.of` and `.from` on collection constructors›WeakSet.of": "var A = {};\nvar B = {};\nvar C = WeakSet.of(A, B);\nreturn C.has(A) + C.has(B);",
  "proposal (stage 1)›`.of` and `.from` on collection constructors›WeakSet.from": "var A = {};\nvar B = {};\nvar C = WeakSet.from([A, B]);\nreturn C.has(A) + C.has(B);",
  "proposal (stage 1)›the pipeline operator": "function doubleSay (str) {\n  return str + ', ' + str;\n}\nfunction capitalize (str) {\n  return str[0].toUpperCase() + str.slice(1);\n}\n\nvar result = 'hello'\n  |> doubleSay\n  |> capitalize\n  |> _ => _ + '!';\n\nreturn result === 'Hello, hello!';",
  "proposal (stage 1)›extensible numeric literals": "function i (str, num) {\n  return typeof str + str + typeof num + num;\n}\n\nreturn 123i === 'string123number123';",
  "proposal (stage 1)›partial application syntax›partial application from left": "function f(a, b) {\n  return a + b;\n};\nvar p = f('a', ?);\nreturn p('b') === 'ab';",
  "proposal (stage 1)›partial application syntax›partial application from right": "function f(a, b) {\n  return a + b;\n};\nvar p = f(?, 'b');\nreturn p('a') === 'ab';",
  "proposal (stage 1)›partial application syntax›partial application for any arg": "function f(a, b, c) {\n  return a + b + c;\n};\nvar p = f(?, 'b', ?);\nreturn p('a', 'c') === 'abc';",
  "proposal (stage 1)›partial application syntax›partial application from left with rest": "function f(a, b, c) {\n  return a + b + c;\n};\nvar p = f('a', ...);\nreturn p('b', 'c') === 'abc';",
  "proposal (stage 1)›partial application syntax›partial application from right with rest": "function f(a, b, c) {\n  return a + b + c;\n};\nvar p = f(..., 'c');\nreturn p('a', 'b') === 'abc';",
  "proposal (stage 1)›partial application syntax›partial application for any arg with rest": "function f(a, b, c, d, e) {\n  return a + b + c + d + e;\n};\nvar p = f(..., 'c', ...);\nreturn p('a', 'b') === 'abcab';",
  "proposal (stage 1)›partial application syntax›mixed partial application": "function f(a, b, c, d) {\n  return a + b + c;\n};\nvar p = f(?, 'b', ...);\nreturn p('a', 'c', 'd') === 'abcd';",
  "proposal (stage 1)›partial application syntax›runtime evaluation": "var f = function() {\n  throw new Error();\n};\nvar p = f(?, 'b');\nf = function(a, b) {\n  return a + b;\n};\nreturn p('a') === 'ab';",
  "proposal (stage 1)›partial application syntax›runtime evaluation of property access": "var o = {};\nvar p = o.f(?, 'b');\no = { x: 'c', f: function(a, b) {\n  return a + b + this.x;\n} };\nreturn p('a') === 'abc';",
  "proposal (stage 1)›partial application syntax›lexical `this`": "function f(a, b) {\n  return a + b + (this === o);\n}\nvar o = { f: f(?, 'b') };\nreturn o.f('a') === 'abfalse';",
  "proposal (stage 1)›partial application syntax›constructor partial application": "function F(a, b) {\n  this.x = a + b;\n}\nvar p = new F(?, 'b');\nreturn p('a').x === 'ab';",
  "proposal (stage 1)›partial application syntax›constructor partial application with rest": "function F(a, b, c) {\n  this.x = a + b + c;\n}\nvar p = new F('a', ...);\nreturn p('b', 'c').x === 'abc';",
  "proposal (stage 1)›Object.freeze and Object.seal syntax›Object.freeze syntax": "return Object.isFrozen({# foo: 42 #});",
  "proposal (stage 1)›Object.freeze and Object.seal syntax›Object.freeze syntax with array literal": "return Object.isFrozen([# 42 #]);",
  "proposal (stage 1)›Object.freeze and Object.seal syntax›Object.seal syntax": "return Object.isSealed({| foo: 42 |});",
  "proposal (stage 1)›Object.freeze and Object.seal syntax›Object.seal syntax with array literal": "return Object.isSealed([| 42 |]);",
  "proposal (stage 1)›Object.freeze and Object.seal syntax›Sealing, function destructuring": "function foo({| bar, baz |}) {\n  return bar + baz;\n}\nif (foo({ bar: 1, baz: 2 }) !== 3) return;\ntry {\n  foo({ bar: 1, fuz: 2 });\n} catch (e) {\n  return true;\n}",
  "proposal (stage 1)›Object.freeze and Object.seal syntax›Freezing, function destructuring": "function foo({# bar, baz #}) {\n  if (baz === 42) bar = 27;\n  return bar + baz;\n}\nif (foo({ bar: 1, baz: 2 }) !== 3) return;\ntry {\n  foo({ bar: 1, baz: 42 });\n} catch (e) {\n  return true;\n}",
  "proposal (stage 1)›Object.freeze and Object.seal syntax›Sealing, function arguments": "function foo(| bar, baz |) {\n  return bar + baz;\n}\nif (foo(1, 2) !== 3) return;\ntry {\n  foo(1, 2, 3);\n} catch (e) {\n  return true;\n}",
  "proposal (stage 1)›Object.freeze and Object.seal syntax›Freezing, function arguments": "function foo(# bar, baz #) {\n  if (baz === 42) bar = 27;\n  return bar + baz;\n}\nif (foo(1, 2) !== 3) return;\ntry {\n  foo(1, 42);\n} catch (e) {\n  return true;\n}",
  "proposal (stage 1)›String.prototype.codePoints": "var results = [];\nfor (let code of 'a𠮷b'.codePoints()) results.push(code);\nreturn results.length === 3\n  && results[0].codePoint === 97 && results[0].position === 0\n  && results[1].codePoint === 134071 && results[1].position === 1\n  && results[2].codePoint === 98 && results[2].position === 3;",
  "proposal (stage 1)›Getting last item from array›Array.prototype.lastItem": "return [1, 2, 3].lastItem === 3;",
  "proposal (stage 1)›Getting last item from array›Array.prototype.lastIndex": "return [1, 2, 3].lastIndex === 2;",
  "proposal (stage 1)›Collections methods›Map.groupBy": "var map = Map.groupBy(new Set([1, 2, 3, 4]), it => it % 2)\nreturn map.size === 2\n  && map.get(0)[0] === 2\n  && map.get(0)[1] === 4\n  && map.get(1)[0] === 1\n  && map.get(1)[1] === 3;",
  "proposal (stage 1)›Collections methods›Map.keyBy": "var map = Map.keyBy(new Set([{ id: 101 }, { id: 102 }]), it => it.id)\nreturn map.size === 2\n  && map.get(101).id === 101\n  && map.get(102).id === 102;",
  "proposal (stage 1)›Collections methods›Map.prototype.deleteAll": "var map = new Map([[1, 2], [3, 4], [5, 6], [7, 8]]);\nmap.deleteAll(1, 5)\nreturn map.size === 2\n  && map.get(3) === 4\n  && map.get(7) === 8;",
  "proposal (stage 1)›Collections methods›Map.prototype.every": "return new Map([[1, 4], [2, 5], [3, 6]]).every(it => typeof it == 'number');",
  "proposal (stage 1)›Collections methods›Map.prototype.filter": "var map = new Map([[1, 4], [2, 5], [3, 6]]).filter(it => !(it % 2));\nreturn map.size === 2\n  && map.get(1) === 4\n  && map.get(3) === 6;",
  "proposal (stage 1)›Collections methods›Map.prototype.find": "return new Map([[1, 2], [2, 3], [3, 4]]).find(it => it % 2) === 3;",
  "proposal (stage 1)›Collections methods›Map.prototype.findKey": "return new Map([[1, 2], [2, 3], [3, 4]]).findKey(it => it % 2) === 2;",
  "proposal (stage 1)›Collections methods›Map.prototype.includes": "return new Map([[1, 2], [2, NaN]]).includes(2)\n  && new Map([[1, 2], [2, NaN]]).includes(NaN);",
  "proposal (stage 1)›Collections methods›Map.prototype.keyOf": "return new Map([[1, 2], [2, NaN]]).keyOf(2) === 1\n  && new Map([[1, 2], [2, NaN]]).keyOf(NaN) === undefined;",
  "proposal (stage 1)›Collections methods›Map.prototype.mapKeys": "var map = new Map([[1, 4], [2, 5], [3, 6]]).mapKeys((value, key) => key * key);\nreturn map.size === 3\n  && map.get(1) === 4\n  && map.get(4) === 5\n  && map.get(9) === 6;",
  "proposal (stage 1)›Collections methods›Map.prototype.mapValues": "var map = new Map([[1, 4], [2, 5], [3, 6]]).mapValues((value, key) => value * value);\nreturn map.size === 3\n  && map.get(1) === 16\n  && map.get(2) === 25\n  && map.get(3) === 36;",
  "proposal (stage 1)›Collections methods›Map.prototype.merge": "var map = new Map([[1, 4], [2, 5]]).merge(new Map([[2, 7], [3, 6]]));\nreturn map.size === 3\n  && map.get(1) === 4\n  && map.get(2) === 7\n  && map.get(3) === 6;",
  "proposal (stage 1)›Collections methods›Map.prototype.reduce": "return new Map([['a', 1], ['b', 2], ['c', 3], ]).reduce(((a, b) => a + b), 1) === 7;",
  "proposal (stage 1)›Collections methods›Map.prototype.some": "return new Map([[1, 4], [2, 5], [3, 6]]).some(it => it % 2);",
  "proposal (stage 1)›Collections methods›Set.prototype.addAll": "var set = new Set([1, 2]).addAll(2, 3);\nreturn set.size === 3\n  && set.has(1)\n  && set.has(2)\n  && set.has(3);",
  "proposal (stage 1)›Collections methods›Set.prototype.deleteAll": "var set = new Set([1, 2, 3, 4]);\nreturn set.deleteAll(2, 3) === true\n  && set.size === 2\n  && set.has(1)\n  && set.has(4);",
  "proposal (stage 1)›Collections methods›Set.prototype.every": "return new Set([1, 2, 3]).every(it => typeof it === 'number');",
  "proposal (stage 1)›Collections methods›Set.prototype.filter": "var set = new Set([1, 2, 3]).filter(it => it % 2);\nreturn set.size === 2\n  && set.has(1)\n  && set.has(3);",
  "proposal (stage 1)›Collections methods›Set.prototype.find": "return new Set([1, 2, 3]).find(it => !(it % 2)) === 2;",
  "proposal (stage 1)›Collections methods›Set.prototype.join": "return new Set([1, 2, 3]).join('|') === '1|2|3';",
  "proposal (stage 1)›Collections methods›Set.prototype.map": "var set = new Set([1, 2, 3]).map(it => it * it);\nreturn set.size === 3\n  && set.has(1)\n  && set.has(4)\n  && set.has(9);",
  "proposal (stage 1)›Collections methods›Set.prototype.reduce": "return new Set([1, 2, 3]).reduce((memo, it) => memo + it) === 6;",
  "proposal (stage 1)›Collections methods›Set.prototype.some": "return new Set([1, 2, 3]).some(it => it % 2);",
  "proposal (stage 1)›Collections methods›WeakMap.prototype.deleteAll": "var a = {};\nvar b = {};\nvar c = {};\nvar d = {};\nvar map = new WeakMap([[a, 1], [b, 2], [c, 3], [d, 4]]);\nmap.deleteAll(a, c)\nreturn !map.has(a)\n  && map.get(b) === 2\n  && !map.has(c)\n  && map.get(d) === 4;",
  "proposal (stage 1)›Collections methods›WeakSet.prototype.addAll": "var a = {};\nvar b = {};\nvar c = {};\nvar d = {};\nvar set = new WeakSet([a, b]);\nset.addAll(c, d)\nreturn set.has(a)\n  && set.has(b)\n  && set.has(c)\n  && set.has(d);",
  "proposal (stage 1)›Collections methods›WeakSet.prototype.deleteAll": "var a = {};\nvar b = {};\nvar c = {};\nvar d = {};\nvar set = new WeakSet([a, b, c, d]);\nset.deleteAll(a, c)\nreturn !set.has(a)\n  && set.has(b)\n  && !set.has(c)\n  && set.has(d);",
  "proposal (stage 1)›Math.seededPRNG": "var gen1 = Math.seededPRNG({ seed: 42 });\nvar gen2 = Math.seededPRNG({ seed: 42 });\nif (!gen1.next || !gen1[Symbol.iterator]) return false;\nvar first = gen1.next().value;\nif (first < 0 || first > 1) return false;\nif (first !== gen2.next().value) return false;\nvar second = gen1.next().value;\nif (first === second) return false;\nreturn second === gen2.next().value;",
  "proposal (stage 1)›{ BigInt, Number }.fromString›Number.fromString": "return Number.fromString('42') === 42;",
  "proposal (stage 1)›{ BigInt, Number }.fromString›BigInt.fromString": "return BigInt.fromString('42') === 42n;",
  "strawman (stage 0)›bind (::) operator›binary form": "function foo() { this.garply += \"foo\"; return this; }\nvar obj = { garply: \"bar\" };\nreturn typeof obj::foo === \"function\" && obj::foo().garply === \"barfoo\";",
  "strawman (stage 0)›bind (::) operator›unary form": "var obj = { garply: \"bar\", foo: function() { this.garply += \"foo\"; return this; } };\nreturn typeof ::obj.foo === \"function\" && ::obj.foo().garply === \"barfoo\";",
  "strawman (stage 0)›String.prototype.at": "return 'a𠮷b'.at(1) === '𠮷';",
  "strawman (stage 0)›additional meta properties›function.callee": "var f = _ => function.callee === f;\nreturn f();",
  "strawman (stage 0)›additional meta properties›function.count": "return (_ => function.count)(1, 2, 3) === 3;",
  "strawman (stage 0)›additional meta properties›function.arguments": "var arr =  (_ => function.arguments)(1, 2, 3);\nreturn Array.isArray(arr)\n  && arr.length === 3\n  && arr[0] === 1\n  && arr[1] === 2\n  && arr[2] === 3;",
  "strawman (stage 0)›method parameter decorators": "var target, key, index;\nfunction decorator(_target, _key, _index){\n  target = _target;\n  key    = _key;\n  index  = _index;\n}\nclass C {\n  method(@decorator foo){ }\n}\nreturn target === C.prototype\n  && key === 'method'\n  && index === 0;",
  "strawman (stage 0)›function expression decorators": "function inverse(f){\n  return function(){\n    return !f.apply(this, arguments);\n  };\n}\nreturn (@inverse function(it){\n  return it % 2;\n})(2);",
  "strawman (stage 0)›Reflect.isCallable / Reflect.isConstructor›Reflect.isCallable": "return Reflect.isCallable(function(){})\n  && Reflect.isCallable(_ => _)\n  && !Reflect.isCallable(class {});",
  "strawman (stage 0)›Reflect.isCallable / Reflect.isConstructor›Reflect.isConstructor": "return Reflect.isConstructor(function(){})\n  && !Reflect.isConstructor(_ => _)\n  && Reflect.isConstructor(class {});",
  "strawman (stage 0)›zones›Zone": "return typeof Zone == 'function';",
  "strawman (stage 0)›zones›Zone.current": "return 'current' in Zone;",
  "strawman (stage 0)›zones›Zone.prototype.name": "return 'name' in Zone.prototype;",
  "strawman (stage 0)›zones›Zone.prototype.parent": "return 'parent' in Zone.prototype;",
  "strawman (stage 0)›zones›Zone.prototype.fork": "return typeof Zone.prototype.fork == 'function';",
  "strawman (stage 0)›zones›Zone.prototype.run": "return typeof Zone.prototype.run == 'function';",
  "strawman (stage 0)›zones›Zone.prototype.wrap": "return typeof Zone.prototype.wrap == 'function';",
  "strawman (stage 0)›syntactic tail calls›direct recursion": "\"use strict\";\nreturn (function f(n){\n  if (n <= 0) {\n    return  \"foo\";\n  }\n  return continue f(n - 1);\n}(1e6)) === \"foo\";",
  "strawman (stage 0)›syntactic tail calls›mutual recursion": "\"use strict\";\nfunction f(n){\n  if (n <= 0) {\n    return  \"foo\";\n  }\n  return continue g(n - 1);\n}\nfunction g(n){\n  if (n <= 0) {\n    return  \"bar\";\n  }\n  return continue f(n - 1);\n}\nreturn f(1e6) === \"foo\" && f(1e6+1) === \"bar\";",
  "strawman (stage 0)›object shorthand improvements›object initializers": "var foo = { bar: 42, baz: 33 };\nvar fuz = { foo.bar, foo['baz'] };\nreturn fuz.bar === 42 && fuz.baz === 33;",
  "strawman (stage 0)›object shorthand improvements›destructuring assignments": "var foo = { bar: 42, baz: 33 };\nvar fuz = {};\n({ fuz.bar, fuz['baz'] } = foo);\nreturn fuz.bar === 42 && fuz.baz === 33;",
  "pre-strawman›Metadata reflection API›Reflect.defineMetadata": "return typeof Reflect.defineMetadata == 'function';",
  "pre-strawman›Metadata reflection API›Reflect.hasMetadata": "return typeof Reflect.hasMetadata == 'function';",
  "pre-strawman›Metadata reflection API›Reflect.hasOwnMetadata": "return typeof Reflect.hasOwnMetadata == 'function';",
  "pre-strawman›Metadata reflection API›Reflect.getMetadata": "return typeof Reflect.getMetadata == 'function';",
  "pre-strawman›Metadata reflection API›Reflect.getOwnMetadata": "return typeof Reflect.getOwnMetadata == 'function';",
  "pre-strawman›Metadata reflection API›Reflect.getMetadataKeys": "return typeof Reflect.getMetadataKeys == 'function';",
  "pre-strawman›Metadata reflection API›Reflect.getOwnMetadataKeys": "return typeof Reflect.getOwnMetadataKeys == 'function';",
  "pre-strawman›Metadata reflection API›Reflect.deleteMetadata": "return typeof Reflect.deleteMetadata == 'function';",
  "pre-strawman›Metadata reflection API›Reflect.metadata": "return typeof Reflect.metadata == 'function';"
}
